---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Layout from "@/layouts/Base.astro";
import BaseHead from "@/components/BaseHead.astro";
import SectionHeading from "@/components/ui/SectionHeading.astro";
import LeftArrowIcon from "@/icon/LeftArrowIcon.astro";
import { calculateReadingTime } from "@/utils/readingTime";
import { SITE_DESCRIPTION, SITE_TITLE } from "@/consts";

type Props = (CollectionEntry<"blog">["data"] | CollectionEntry<"notes">["data"]) & {slug?: string};
type SiteMetadata = {
	title: string;
	description: string;
	image?: ImageMetadata;
}

const { slug, title, description, pubDate, updatedDate, heroImage } =
  Astro.props;

const content = Astro.slots.render("default");
const readingTime = calculateReadingTime(await content);

const OGImage = {
  src: `${Astro.site}${slug}/og.png`,
  width: 2400,
  height: 1260,
  format: 'png' as const
}

const meta: SiteMetadata = {
  title: `${title}`, 
  description: description || SITE_DESCRIPTION,
  image: heroImage && heroImage.src ? heroImage : OGImage,
}
---

<Layout class="pt-24 pb-18" meta={meta}>
  <!-- Terminal Header -->
  <div class="flex items-center justify-between pb-4 font-mono">
    <SectionHeading command="cat" heading={slug} extension="md" />
    <a
      href="/blog/"
      class="text-neutral-400 hover:text-blue-400 transition-colors text-sm flex items-center space-x-1"
    >
      <LeftArrowIcon class="size-4" />
      <span>cd ..</span>
    </a>
  </div>

  <article class="space-y-6">
    <!-- Hero Image -->
    {
      heroImage && (
        <Image
          width={1200}
          height={630}
          src={heroImage ? heroImage : OGImage}
          alt={title}
          class="w-full h-64 md:h-96 object-cover rounded"
        />
      )
    }

    <div class="space-y-4 pt-2 font-mono">
      <h1 class="font-pixel text-2xl font-bold">{title}</h1>
      {
        description && (
          <p class="text-neutral-400 text-sm -mt-2">{description}</p>
        )
      }
    </div>

    <!-- Article Content -->
    <div class="flex flex-col gap-4 py-2 text-neutral-300">
      <slot />
    </div>

    <div
      class="flex flex-col space-y-2 text-sm text-neutral-400 font-mono border-t border-neutral-700 pt-6 mt-10"
    >
      <span>created: {pubDate.toISOString()}</span>
      <span>
        last modified: {
          updatedDate ? updatedDate.toISOString() : pubDate.toISOString()
        }
      </span>
      <span>estimated read time: {readingTime} min</span>
    </div>
  </article>
</Layout>
