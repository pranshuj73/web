---
import BaseHead from '../components/BaseHead.astro';
---

<BaseHead title="404" description="Page not found!" />

<style>
	body {
		margin: 0;
		padding: 0;
		background: #000;
		color: #fff;
		font-family: monospace;
		overflow: hidden;
    position:relative;
	}
	#three-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		z-index: 1;
		user-select: none;
		-webkit-user-select: none;
		-moz-user-select: none;
		-ms-user-select: none;
		touch-action: none;
		-webkit-touch-callout: none;
		-webkit-tap-highlight-color: transparent;
	}
	#ascii-output {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 2;
		background: transparent;
		color: #0f0;
		font-family: 'Courier New', monospace;
		font-size: 6px;
		line-height: 6px;
		white-space: pre;
		pointer-events: none;
		user-select: none;
	}
	.error-info {
		position: fixed;
		bottom: 20px;
		left: 20px;
		z-index: 3;
		background: rgba(0, 0, 0, 0.9);
		backdrop-filter: blur(10px);
		padding: 25px;
		border-radius: 12px;
		border: 2px solid #0f0;
		box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
		min-width: 280px;
	}
	.error-info h1 {
		margin: 0 0 10px 0;
		color: #0f0;
		font-size: 20px;
		font-weight: bold;
		text-shadow: 0 0 10px #0f0;
	}
	.error-info p {
		margin: 0 0 8px 0;
		color: #fff;
		font-size: 12px;
		line-height: 1.3;
	}
	.error-info a {
		color: #0f0;
		text-decoration: none;
		border: 2px solid #0f0;
    margin-top: 10px;
		padding: 8px 16px;
		border-radius: 6px;
		transition: all 0.3s ease;
		display: inline-block;
		font-weight: bold;
		font-size: 12px;
		text-shadow: 0 0 5px #0f0;
		box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);
	}
	.error-info a:hover {
		background: #0f0;
		color: #000;
		box-shadow: 0 0 20px rgba(0, 255, 0, 0.6);
		transform: translateY(-2px);
	}
	#debug {
		position: fixed;
		bottom: 20px;
		right: 20px;
		z-index: 4;
		background: rgba(0, 0, 0, 0.9);
		backdrop-filter: blur(10px);
		padding: 15px;
		border-radius: 8px;
		border: 1px solid #0f0;
		font-size: 10px;
		color: #0f0;
		font-family: 'Courier New', monospace;
		box-shadow: 0 0 15px rgba(0, 255, 0, 0.2);
		max-width: 300px;
		word-wrap: break-word;
	}

	/* Mobile Responsive Styles */
	@media (max-width: 768px) {
		.error-info {
			bottom: 20px;
			left: 50%;
			transform: translateX(-50%);
			min-width: auto;
			width: calc(100vw - 40px);
			max-width: 350px;
			padding: 20px;
		}
		
		.error-info h1 {
			font-size: 16px;
			margin: 0 0 8px 0;
		}
		
		.error-info p {
			font-size: 10px;
			margin: 0 0 6px 0;
			line-height: 1.2;
		}
		
		.error-info a {
			font-size: 10px;
			padding: 6px 12px;
			margin-top: 8px;
		}
		
		#debug {
			display: none;
		}
	}

	/* Accessibility styles */
	.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border: 0;
	}

	.skip-link {
		position: absolute;
		top: -40px;
		left: 6px;
		background: #0f0;
		color: #000;
		padding: 8px;
		text-decoration: none;
		font-weight: bold;
		border-radius: 4px;
		z-index: 1000;
		transition: top 0.3s;
	}

	.skip-link:focus {
		top: 6px;
	}

	/* Focus styles for keyboard navigation */
	#three-container:focus {
		outline: 2px solid #0f0;
		outline-offset: 2px;
	}

	.error-info a:focus {
		outline: 2px solid #0f0;
		outline-offset: 2px;
		box-shadow: 0 0 20px rgba(0, 255, 0, 0.6);
	}
	.page-not-found {
		position: fixed;
		top: 60%;
		left: 50%;
		transform: translate(-50%, -50%);
		z-index: 3;
		color: #0f0;
		font-size: 24px;
		font-family: monospace;
		text-align: center;
		text-shadow: 0 0 10px #0f0;
		pointer-events: none;
		user-select: none;
	}
</style>

<div id="three-container" 
     role="application" 
     aria-label="Interactive 3D 404 error page with ASCII art renderer"
     tabindex="0">

  <!-- Screen reader content -->
  <div class="sr-only">
    <h1>404 Error - Page Not Found</h1>
    <p>The page you are looking for could not be found. This page displays an interactive 3D "404" text that you can rotate by clicking and dragging with your mouse or touch device.</p>
    <p>Use the "Go Home" button below to return to the main page.</p>
  </div>

  <div id="ascii-output" aria-hidden="true"></div>
  <div id="debug" aria-hidden="true">Loading...</div>

  <div class="error-info" role="alert">
    <h1 id="error-title">KERNEL PANIC</h1>
    <p>SEGMENTATION FAULT: Resource not found in memory space</p>
    <p>Error 0x404: Null pointer exception at requested URL</p>
    <p>Stack trace: Page allocation failed</p>
    <a href="/" 
       role="button"
       aria-describedby="error-title"
       aria-label="Return to home page">sudo reboot --to-home</a>
  </div>

</div>

<!-- Skip link for keyboard navigation -->
<a href="/" class="skip-link">Skip to home page</a>


<script>
	// Wait for DOM to be ready
	document.addEventListener('DOMContentLoaded', async () => {
		// Dynamic camera distance based on viewport width
		function getCameraDistance() {
			const width = window.innerWidth;
			
			if (width <= 480) {
				return 900; // Small phones
			} else if (width <= 768) {
				return 700; // Large phones / small tablets
			} else if (width <= 1024) {
				return 650; // Tablets / small laptops
			} else {
				return 600; // Standard desktops
			}
		}

		function debug(message) {
			document.getElementById('debug').textContent = message;
		}

		try {
			// Dynamic import of Three.js and required addons
			const THREE = await import('three');
			const { AsciiEffect } = await import('three/addons/effects/AsciiEffect.js');
			const { TrackballControls } = await import('three/addons/controls/TrackballControls.js');
			
			let camera, controls, scene, renderer, effect;
			let text404Mesh;


			debug('[KERN] Initializing 3D graphics subsystem...');

			// Scene setup
			camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 2000);
			// Set camera distance based on viewport width
			camera.position.set(0, 0, getCameraDistance());
			camera.lookAt(0, 0, 0);

			scene = new THREE.Scene();
			scene.background = new THREE.Color(0, 0, 0);

			// Lighting
			const pointLight1 = new THREE.PointLight(0xffffff, 3, 0, 0);
			pointLight1.position.set(500, 500, 500);
			scene.add(pointLight1);

			const pointLight2 = new THREE.PointLight(0xffffff, 1, 0, 0);
			pointLight2.position.set(-500, -500, -500);
			scene.add(pointLight2);

			// Create actual 3D text using TextGeometry
			const { FontLoader } = await import('three/addons/loaders/FontLoader.js');
			const { TextGeometry } = await import('three/addons/geometries/TextGeometry.js');
			const loader = new FontLoader();
			
			// Load font and create real text (no fallback cubes needed)
			debug('[NET] Downloading font binary from CDN...');
			loader.load(
				'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',
				function(font) {
					debug('[FONT] Binary decoded, compiling mesh geometry...');
					
					const baseSize = 200;
					const baseBevelThickness = 5;
					const baseBevelSize = 3;

					const textGeometry = new TextGeometry('404', {
						font: font,
						size: baseSize,
						curveSegments: 12,
						bevelEnabled: true,
						bevelThickness: baseBevelThickness,
						bevelSize: baseBevelSize,
						bevelOffset: 0,
						bevelSegments: 5
					});

					// Center the geometry itself, not just position the mesh
					textGeometry.computeBoundingBox();
					const centerOffsetX = -0.5 * (textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x);
					const centerOffsetY = -0.5 * (textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y);
					const centerOffsetZ = -0.5 * (textGeometry.boundingBox.max.z - textGeometry.boundingBox.min.z);
					
					// Translate the geometry so its center is at origin
					textGeometry.translate(centerOffsetX, centerOffsetY, centerOffsetZ);

					const textMaterial = new THREE.MeshPhongMaterial({ 
						color: 0x00ff00,
						flatShading: true
					});

					text404Mesh = new THREE.Mesh(textGeometry, textMaterial);
					// Position at origin - geometry is already centered
					text404Mesh.position.set(0, 0, 0);
					scene.add(text404Mesh);

					debug('[GEOM] Text mesh centered and positioned');
					debug('[SCENE] Objects registered in render queue');
					debug('[MESH] 404 geometry added to world space');

					debug('[GPU] Mesh uploaded to graphics memory');
					
					// Initialize TrackballControls like the original ASCII example
					import('three/addons/controls/TrackballControls.js').then(({ TrackballControls }) => {
						controls = new TrackballControls(camera, effect.domElement);
						
						// Configure controls to only allow rotation (no zoom/pan)
						controls.noZoom = true;
						controls.noPan = true;
						controls.rotateSpeed = 3.0; // Increase sensitivity for easier dragging
						controls.staticMoving = true;
						controls.dynamicDampingFactor = 0.3;
						
						debug('[INPUT] Touch/mouse handlers initialized');
						debug('[RENDER] 3D mesh allocated, vertices loaded to GPU');
					});
					
					// Restart animation now that text mesh is ready
					stopAnimation();
					startAnimation();
				},
				function(progress) {
					debug('[NET] Transfer ' + Math.round(progress.loaded / progress.total * 100) + '% complete');
				},
				function(error) {
					debug('[ERR] Font download failed, fallback active');
				}
			);

			debug('[MESH] 3D objects loaded into scene graph');

			// WebGL renderer
			renderer = new THREE.WebGLRenderer();
			renderer.setSize(window.innerWidth, window.innerHeight);
			renderer.setAnimationLoop(animate);

			// ASCII Effect - this is the key!
			effect = new AsciiEffect(renderer, ' .:-+*=%@#', { invert: true });
			effect.setSize(window.innerWidth, window.innerHeight);
			effect.domElement.style.color = '#00ff00';
			effect.domElement.style.backgroundColor = 'black';

			// Append the ASCII effect to the container (not the regular renderer)
			document.getElementById('three-container').appendChild(effect.domElement);

			// Set initial cursor
			effect.domElement.style.cursor = 'grab';
			debug('[ASCII] Character buffer initialized, ready for render');

			let lastRenderTime = 0;
			let animationRunning = false;
			const clock = new THREE.Clock(); // Use Three.js Clock for proper timing
			const rotationSpeed = 0.2; // Radians per second - constant speed
			const targetFPS = 15; // Reduce ASCII chaos
			const frameInterval = 1000 / targetFPS;

			function animate() {
				const currentTime = Date.now();
				
				// Continuous horizontal spinning - time-based for constant speed
				if (text404Mesh) {
					const deltaTime = clock.getDelta();
					text404Mesh.rotation.y += rotationSpeed * deltaTime; // Constant speed regardless of framerate
				}
				
				// Update controls like the original ASCII example
				if (controls) {
					controls.update();
				}
				
				// Only render at target FPS to reduce ASCII chaos
				if (currentTime - lastRenderTime >= frameInterval) {
					effect.render(scene, camera);
					lastRenderTime = currentTime;
				}
				
				if (animationRunning) {
					requestAnimationFrame(animate);
				}
			}

			function startAnimation() {
				if (!animationRunning) {
					animationRunning = true;
					debug('[ANIM] Render loop thread started');
					animate();
				}
			}

			function stopAnimation() {
				animationRunning = false;
				debug('[ANIM] Render thread terminated');
			}

			// Start initial animation
			startAnimation();

			// Handle window resize
			window.addEventListener('resize', () => {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize(window.innerWidth, window.innerHeight);
				effect.setSize(window.innerWidth, window.innerHeight);
				
				// Adjust camera distance based on new viewport width
				camera.position.z = getCameraDistance();
			});

		} catch (error) {
			console.error('Three.js setup error:', error);
			document.getElementById('debug').textContent = '[FATAL] Error Encountered: Unable to initialize 3D graphics subsystem';
		}
	});
</script>
